module.exports.config = {
    name: "help",
    version: "1.1.3",
    hasPermission: 0,
    credits: "DC-Nam",
    description: "Xem danh s√°ch l·ªánh v√† th√¥ng tin chi ti·∫øt",
    commandCategory: "Ng∆∞·ªùi d√πng",
    usePrefix: false,
    usages: "[t√™n l·ªánh/all]",
    cooldowns: 0
};

module.exports.languages = {
    "vi": {},
    "en": {}
};

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;
    const cmds = global.client.commands;
    
    if (!cmds || cmds.size === 0) {
        return api.sendMessage("‚ö†Ô∏è Bot ch∆∞a c√≥ l·ªánh n√†o!", threadID, messageID);
    }

    const threadData = global.data.threadData.get(threadID) || {};
    const prefix = threadData.PREFIX || global.config.PREFIX || "!";
    const type = args[0] ? args[0].toLowerCase() : "";
    let msg = "";

    // T√≠nh th·ªùi gian uptime c·ªßa bot
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);

    // H√†m l·∫•y ·∫£nh ƒë√≠nh k√®m n·∫øu c√≥
    const getAttachment = () => (global.khanhdayr && global.khanhdayr.length > 0) ? global.khanhdayr.splice(0, 1) : [];

    // Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªánh
    if (type === "all") {
        let i = 0;
        for (const cmd of cmds.values()) {
            msg += `${++i}. üìå L·ªánh: ${cmd.config.name}\nüîπ M√¥ t·∫£: ${cmd.config.description}\n\n`;
        }
        return api.sendMessage({ body: msg, attachment: getAttachment() }, threadID, messageID);
    }

    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa m·ªôt l·ªánh
    if (type) {
        if (!cmds.has(type)) {
            const stringSimilarity = require("string-similarity");
            const allCommandNames = Array.from(cmds.keys());
            const checker = stringSimilarity.findBestMatch(type, allCommandNames);
            
            if (checker.bestMatch.rating >= 0.6) {
                return api.sendMessage(
                    { body: `‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh '${type}'.\n‚ö° C√≥ ph·∫£i b·∫°n mu·ªën d√πng '${checker.bestMatch.target}' kh√¥ng?`, attachment: getAttachment() },
                    threadID,
                    messageID
                );
            }
            return api.sendMessage({ body: `‚ùå Kh√¥ng t√¨m th·∫•y l·ªánh '${type}'.`, attachment: getAttachment() }, threadID, messageID);
        }

        const cmd = cmds.get(type).config;
        msg = `=== üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ===\n`
            + `üîπ ùóßùó≤ÃÇùóª: ${cmd.name}\n`
            + `üìå ùó£ùóµùó∂ùó≤ÃÇùóª ùóØùóÆÃâùóª: ${cmd.version}\n`
            + `üîó ùó§ùòÇùòÜùó≤ÃÇÃÄùóª ùóµùóÆÃ£ùóª: ${getPermissionText(cmd.hasPermission)}\n`
            + `üë§ ùóßùóÆÃÅùó∞ ùó¥ùó∂ùóÆÃâ: ${cmd.credits}\n`
            + `üìù ùó†ùóºÃÇ ùòÅùóÆÃâ: ${cmd.description}\n`
            + `üìÇ ùó°ùóµùóºÃÅùó∫: ${cmd.commandCategory}\n`
            + `üí¨ ùóñùóÆÃÅùó∞ùóµ ùòÄùòÇÃõÃâ ùó±ùòÇÃ£ùóªùó¥: ${cmd.usages || "Kh√¥ng c√≥ h∆∞·ªõng d·∫´n"}\n`
            + `‚è≥ ùóßùóµùóºÃõÃÄùó∂ ùó¥ùó∂ùóÆùóª ùó∞ùóµùóºÃõÃÄ: ${cmd.cooldowns}s`;

        return api.sendMessage({ body: msg, attachment: getAttachment() }, threadID, messageID);
    }

    // Hi·ªÉn th·ªã danh s√°ch l·ªánh theo danh m·ª•c
    const categories = categorizeCommands(cmds);
    let i = 0;
    for (const category of categories) {
        msg += `‚≠ê‚îÅ‚îÅ‚îÅ‚îÅ ‚å© ${category.name.toUpperCase()} ‚å™ ‚îÅ‚îÅ‚îÅ‚îÅ‚≠ê\nüë§ Quy·ªÅn H·∫°n: ${getPermissionText(category.permission)}\nüìù T·ªïng: ${category.commands.length} l·ªánh\n‚úèÔ∏è Danh s√°ch: ${category.commands.join(", ")}\n\n`;
    }

    msg += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüì• T·ªïng l·ªánh: ${cmds.size}\n‚è≥ Bot online: ${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y.\nüî• D√πng '${prefix}help [t√™n l·ªánh]' ƒë·ªÉ xem chi ti·∫øt l·ªánh.`;

    return api.sendMessage({ body: msg, attachment: getAttachment() }, threadID, messageID);
};

// H√†m nh√≥m l·ªánh theo danh m·ª•c
function categorizeCommands(cmds) {
    const categories = [];
    for (const cmd of cmds.values()) {
        const { commandCategory, hasPermission, name } = cmd.config;
        const category = categories.find(c => c.name === commandCategory);
        if (category) {
            category.commands.push(name);
        } else {
            categories.push({ name: commandCategory, permission: hasPermission, commands: [name] });
        }
    }
    return categories;
}

// H√†m hi·ªÉn th·ªã quy·ªÅn h·∫°n
function getPermissionText(permission) {
    return permission === 0 ? "Th√†nh Vi√™n" 
         : permission === 1 ? "QTV Nh√≥m" 
         : permission === 2 ? "Admin Bot" 
         : "To√†n Quy·ªÅn";
}
